version: "3.8"

services:
  postgres:
    image: postgres:12
    container_name: postgresDb
    restart: always
    env_file:
      - ./backend/.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - mynetwork

  adminer:
    image: adminer:latest
    container_name: postgresDbAdminer
    restart: always
    labels:
      - "traefik.http.routers.adminer.rule=Host(`db.qurtana.com.ng`)"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls.certresolver=myresolver"
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    networks:
      - mynetwork

  traefik:
    image: traefik:v2.5
    container_name: traefikProxyManager
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.dashboard.address=:8090"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=ayodejihamed93@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8090:8090"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./letsencrypt:/letsencrypt"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`proxy.qurtana.com.ng`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.dashboard.entrypoints=dashboard"
      - "traefik.http.routers.dashboard.service=api@internal"
    networks:
      - mynetwork

  backend:
    build: ./backend
    image: backend:fastapi
    container_name: backend
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    labels:
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)"
      - "traefik.http.routers.backend.entrypoints=websecure,web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.http.routers.backend.middlewares=api-stripprefix"
    depends_on:
      - postgres
      - traefik
    networks:
      - mynetwork

  frontend:
    build: ./frontend
    image: frontend:react
    container_name: frontend
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    labels:
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    depends_on:
      - backend
      - traefik
    networks:
      - mynetwork

volumes:
  postgres_data:
  letsencrypt:

networks:
  mynetwork:
